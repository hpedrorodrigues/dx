#!/usr/bin/env bash
#
# dx(1) is a command-line tool to help manage Docker resources

# Copyright 2019 Pedro Rodrigues
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euo pipefail

## Bash version check

readonly MIN_REQUIRED_BASH_VERSION='5'

if [ -z "${BASH_VERSION:-}" ]; then
  echo '!!! Bash is required to run dx' >&2
  exit 1
fi

if [ -z "${BASH_VERSINFO:-}" -o "${BASH_VERSINFO:-}" -lt "${MIN_REQUIRED_BASH_VERSION}" ]; then
  echo '!!! Sorry, you need at least bash-5.0 to run dx' >&2
  exit 1
fi

## Environment variables

DX_SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
export DX_SCRIPT_DIR

DX_HOME="${DX_HOME:-${DX_SCRIPT_DIR}}"
export DX_HOME

DXC_HOME="${DX_HOME}/commands"
export DXC_HOME

## Helper functions

function dx::print_help() {
  cat <<EOF
dx

Command-line tool to help you manage Docker resources faster
---
Usage:
  dx ls                         : List all resources
  dx exec                       : Execute custom commands in a running container
  dx logs                       : Show the logs of a container
  dx inspect                    : Return low-level information on objects
  dx delete                     : Remove one or more resources     [confirmation required]
  dx clear <resource_filter>    : Remove resources using a filter  [confirmation required]
     |> containers                - Remove ALL containers
     |> images                    - Remove images not used by any containers
     |> volumes                   - Remove volumes not referenced by any containers
     |> networks                  - Remove networks that has not being used
     |> all                       - Remove ALL resources
     |> dirt                      - Remove resources that has not being used

  dx --help                     : Show this message
EOF
}

function dx::find_command() {
  local -r filter="${1:-}"

  if [ -z "${filter}" ]; then
    echo "!!! The function \"${FUNCNAME[0]:-}\" needs an argument (i.e exec)." >&2
    exit 1
  fi

  local possibilities
  readarray possibilities < <(find "${DXC_HOME}" \
    -maxdepth 1 \
    -type f \
    -iname "${filter}*" \
    \( -perm -u=x -o -perm -g=x -o -perm -o=x \))

  if [ "${#possibilities[@]}" -lt 1 ]; then
    echo "No command found for \"${filter}\"." >&2
    exit 1
  fi

  if [ "${#possibilities[@]}" -gt 1 ]; then
    echo -e "Multiple commands found for \"${filter}\".\n" >&2
    for possibility in "${possibilities[@]}"; do
      echo "|> $(basename "${possibility}")" >&2
    done
    exit 1
  fi

  echo "${possibilities[0]}"
}

function dx::check_arguments() {
  local -r n_args="${#}"

  if [ ${n_args} -lt 1 ] || [[ "${*}" == *'--help'* ]]; then
    dx::print_help
    exit 0
  fi

  local -r dx_command="$(dx::find_command "${1}")"
  if [ -z "${dx_command}" ]; then
    echo
    dx::print_help
    exit 1
  fi
}

function dx::main() {
  dx::check_arguments "${@}"

  local -r filter="${1:-}"
  local -r dx_command="$(dx::find_command "${filter}")"

  bash "${dx_command}" "${@:2}"
}

## Running

dx::main "${@}"
